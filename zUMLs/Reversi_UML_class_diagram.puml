@startuml Reversi

package Model <<rectangle>> {

    class Game{
        board: Board
        curr_player: Player
        size: int
        change_player()
        check_available_moves(board)
        is_valid_move(player, position): bool
        make_move(player, position)
        update_score(player)
        check_winner(board)
    }

    class Disk{
        color: DiskColor
        position: tuple
        change_color()        
    }

    class Player{
        color: DiskColor
        available_moves: list
        score: int
    }
    
    class Board {
        size: int        
        mat: list
        disks: dict
        add_disk(player, position)
        generate_starter_board()
        update_board()
    }

    enum DiskColorNr {
        BLACK
        WHITE 
        EMPTY
    }
}

Game "1" *-- "1" Board : contains >
Game "2" o-- "1" Player : has >
Board "1" *-- "many" Disk : has >
Player <.. DiskColorNr
Disk <.. DiskColorNr



package View <<rectangle>> {
    abstract GameView {
        game: Game        
        get_move(position)
        display_scores(player_1, player_2)
        display_winner(game)
    }

    class GameConsoleView {
        game: Game        
        get_move(position)
        display_scores(player_1, player_2)
        display_winner(game)
    }

    abstract BoardView {
        board: Board
        display_board(board)
    }

    class BoardConsoleView {
        board: Board
        disk_color_sym: dict
        display_board(board)
    }   

}

GameView "1" <|-- "1" GameConsoleView : < is a
BoardView "1" <|-- "1" BoardConsoleView  : < is a



package Controller <<rectangle>> {
    class GameController {
        model: Game
        view: GameView
        run_game()
    }
}

GameController *-- Game : contains a >
GameController *-- GameView : contains a >
GameController *-- BoardView : contains a >

@enduml