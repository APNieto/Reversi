********To Do*********

------Model------
  
  .Fix winner bug scenario below:
  
  | 1 | 2 | 3 | 4 |
--+---+---+---+---+
 1| X | X | X | X |
--+---+---+---+---+
 2| X | O | O | X |
--+---+---+---+---+
 3| O | O | O | X |
--+---+---+---+---+
 4| X | O | O | O |
--+---+---+---+---+

*****Scores*****
Player Black: 8
Player White: 8


**************** Game ended! ****************
Winner is player Black with a score of 8.
Loser is player Black with a score of 8.




------View------


------UML------
.Update UML with changes in model - new rules module




*********Known problems*********




*********Last Done (last done at the top)*********




*********Questions*********
1: about separating game logic from main game module:
     -encapsulated is_valid_move and check_available_moves, was that OK?
2: how to not import "circular modules" but still get the type hint in function definitions?